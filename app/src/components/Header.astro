---
// import components
import Links from './Links.astro';
import IconMenu from '../components/IconMenu.astro';
import IconCoffee from '../components/IconCoffe.astro';
import IconGithub from '../components/IconGithub.astro';
// import IconCoffee from './IconCoffee.astro';

const navLinks = [
  {
    name: 'about',
    href: '/about/',
  },
  {
    name: 'resets',
    href: 'https://github.com/yefreescoding/reseteame/tree/main/resets',
  },
  {
    name: 'readme',
    href: 'https://github.com/yefreescoding/reseteame#readme',
  },
];
---

<header
  id="header"
  class="max-w-[90em] flex  sticky z-10 top-1 mx-auto p-4 gap-8 items-center justify-between md:justify-start bg-gray-100 rounded-sm transition-all"
>
  <a href="/" class="z-10 flex items-center">
    <span class="text-xl font-bold uppercase">Resets</span>
    <img
      src="/icons/resets.svg"
      alt=""
      class="w-[2rem] h-[2rem] aspect-square"
    />
  </a>
  <nav
    id="nav"
    data-visible="false"
    class="header__nav md:flex-1 justify-between md:items-center"
  >
    <div class="flex flex-col md:flex-row gap-4">
      {
        navLinks.map((link) => (
          <a
            href={link.href}
            class="text-xl md:text-base capitalize hover:underline hover:underline-offset-8 hover:decoration-2 "
          >
            {link.name}
          </a>
        ))
      }
    </div>
    <div class="z-10 flex flex-col gap-4 md:flex-row">
      <Links
        text="Share a coffee"
        href="https://www.buymeacoffee.com/yefree13saX"
        svg={true}
        isFilled={true}
        style="secondary"
      >
        <IconCoffee />
      </Links>
      <Links
        text="Source code"
        href="https://github.com/yefreescoding/reseteame"
        svg={true}
      >
        <IconGithub />
      </Links>
    </div>
  </nav>
  <div class="lg:hidden z-10">
    <button
      id="menu-toggle"
      class="w-[2rem] flex items-center p-[5px] rounded-sm dark:bg-indigo-200/50"
      aria-label="Mobile menu toggle"
    >
      <IconMenu />
    </button>
  </div>
</header>

<style lang="scss" is:global>
  #header.on_scroll_class {
    border: 1px solid hsl(0, 0%, 80%);
    transform: translateY(8px);
    box-shadow: 0px 3px 5px hsl(0, 0%, 90%);
  }

  .header__nav {
    display: flex;
    gap: 1rem;
    @media (width < 48em) {
      position: absolute;
      inset: 5rem 0 0 0;
      // background-color: var(--clr-bg);
      background-color: hsl(0, 0%, 100%);
      border: 1px solid hsl(0, 0%, 75%);
      border-radius: .4rem;
      flex-direction: column;
      padding: 5vh 1rem;
      height: fit-content;
      transition: all 0.24s ease;
      opacity: 0;
      transform: translateY(-100%);
      &[data-visible='true'] {
        opacity: 1;
        transform: translateY(0);
      }
    }
  }
  body[data-visible='true'] {
    overflow: hidden;
  }
</style>

<script>
  const menuToggle = document.getElementById('menu-toggle') as HTMLElement;
  const navBar = document.getElementById('nav') as HTMLElement;

  console.log(document.body.getAttribute('data-visible'));

  menuToggle.addEventListener('click', () => {
    const visibility = navBar.getAttribute('data-visible');
    console.log(visibility);
    if (visibility === 'false') {
      navBar.setAttribute('data-visible', 'true');
      document.body.setAttribute('data-visible', 'true');
    } else {
      navBar.setAttribute('data-visible', 'false');
      document.body.setAttribute('data-visible', 'false');
    }
  });

  const header = document.getElementById("header") as HTMLElement;
  const scrollWatcher = document.createElement("div");

  scrollWatcher.setAttribute("data-scroll", "");

  header.before(scrollWatcher)
  const navObserver = new IntersectionObserver((entries)=>{
    header.classList.toggle("on_scroll_class", !entries[0].isIntersecting)
  });

  navObserver.observe(scrollWatcher);

</script>
